require 'sshkit_addon'
require 'dotenv'
Dotenv.load

password = "zzzzz"
master_ip = %Q(192.168.xx.xxx)
master = SSHKit::Host.new :hostname => master_ip, :user => "user", :password => password


@task_index=0
def next_task_index
  @task_index += 1
  sprintf("%02d", @task_index)
end

namespace "util" do
  desc "run command"
  task :run_command, [:cmd] do |t, args|
    cmd = args.cmd
    on master do |host|
       execute cmd
    end
  end
end

target_dir = "foreign_currency_ex_flow"
working_dir = target_dir + "/frontend"

desc "upload"
task "#{next_task_index}_upload" do
  on master do |host|
    execute %Q(mkdir -p #{working_dir})
    %w(config public scripts server src .env package.json).each do |file|
      upload! file, working_dir, recursive: true
    end
  end
end

desc "build"
task "#{next_task_index}_build" do
  on master do |host|
    cmds = ShellCommandConstructor.construct_command %Q{
      cd /myapp
      npm install
      # Fix the issue of prettycron
      sed -i.old -e "/LATER_COV/c require('./later');" node_modules/later/index.js

      npm run build
    }
    content = <<~EOF
      FROM node:8.4
      
      WORKDIR /myapp
      COPY . /myapp
      
      RUN #{cmds}

      CMD ["node", "server"]
    EOF

    put content, working_dir + "/Dockerfile"
    cmds = ShellCommandConstructor.construct_command %Q{
       cd #{working_dir}
       sudo docker build -t exmonitor:0.1.0 .
    }

    execute cmds
  end
end

desc "push to icp"
task "#{next_task_index}_push" do
  on master do |host|
    cmds = ShellCommandConstructor.construct_command %Q{
      sudo docker login -u admin -p admin master.cfc:8500
      sudo docker tag exmonitor:0.1.0 master.cfc:8500/zhiminwen/exmonitor:0.1.0
      sudo docker push master.cfc:8500/zhiminwen/exmonitor:0.1.0
    }
    execute cmds
  end
end

desc "deploy to K8s"
task "#{next_task_index}_deploy_k8s" do
  on master do |host|
    content = <<~EOF
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      name: exchange-rate-monitor
      labels:
        app: exchange-rate-monitor
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: exchange-rate-monitor
        spec:
          containers:
            - name: exchange-rate-monitor
              image: master.cfc:8500/zhiminwen/exmonitor:0.1.0
              imagePullPolicy: IfNotPresent
              ports:
                - containerPort: 80
              env:
                - name: FRONTEND_SOCKET_URL
                  value: http://192.168.64.238:31720
                - name: WHISKER_API_HOST
                  value: 192.168.64.238:32396
                
          imagePullSecrets:
            - name: admin.registrykey
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: exchange-rate-monitor
      labels:
        app: exchange-rate-monitor
    spec:
      type: NodePort
      ports:
        - port: 80
          targetPort: 80
          protocol: TCP
          name: http
      selector:
        app: exchange-rate-monitor
    
    EOF
    
    put content, file = "/tmp/exmon.yaml"
    execute %Q(sudo kubectl apply -f #{file})
  end
end

worker1 = SSHKit::Host.new :hostname => "192.168.aaa.yyy", :user => "user", :password => password
worker2 = SSHKit::Host.new :hostname => "192.168.aaa.xxx", :user => "user", :password => password


desc "scale down"
task "#{next_task_index}_scale_down" do
  on master do |host|
    execute %Q(kubectl scale deployment exchange-rate-monitor --replicas=0)
  end
end

desc "remove old image"
task "#{next_task_index}_remove_old_image" do
  on [worker1, worker2] do |host|
    execute %Q(sudo docker rmi master.cfc:8500/zhiminwen/exmonitor:0.1.0 ; echo done)
  end
end

desc "restart image"
task "#{next_task_index}_restart" do
  on master do |host|
    execute %Q(kubectl scale deployment exchange-rate-monitor --replicas=1)
  end
end